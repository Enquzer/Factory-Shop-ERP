export type ProductVariant = {
  id: string;
  productId: string;
  color: string;
  size: string;
  stock: number;
  imageUrl?: string;
};

export type AgePricing = {
  id?: number;  // Make id optional since it's auto-generated by the database
  productId: string;
  ageMin: number;
  ageMax: number;
  price: number;
};

export type Product = {
  id: string;
  productCode: string;
  name: string;
  category: string;
  price: number;
  minimumStockLevel: number;
  variants: ProductVariant[];
  agePricing?: AgePricing[];
  imageUrl?: string;
  description?: string;
  readyToDeliver?: number; // Add this field to match server-side implementation
  created_at?: string; // Add created_at field
};

// Client-side functions that call the API
export async function getProducts(forceRefresh: boolean = false, forShop: boolean = false): Promise<Product[]> {
  try {
    console.log('getProducts called with forceRefresh:', forceRefresh, 'forShop:', forShop);
    
    // Use absolute URL for server-side requests, relative for client-side
    const baseUrl = typeof window !== 'undefined' 
      ? window.location.origin 
      : process.env.NEXT_PUBLIC_BASE_URL || `http://localhost:${process.env.PORT || 3000}`;
    
    // Add timestamp to prevent caching
    const timestamp = forceRefresh ? `?t=${Date.now()}` : '';
    const shopParam = forShop ? `${timestamp ? '&' : '?'}for=shop` : timestamp;
    const url = typeof window === 'undefined' 
      ? `${baseUrl}/api/products${timestamp}${shopParam}`
      : `/api/products${timestamp}${shopParam}`;
      
    console.log('Fetching products from URL:', url);
      
    const response = await fetch(url, {
      // Add cache control headers to prevent browser caching
      cache: 'no-store',
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
    
    console.log('Products API response status:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Products API error response:', errorText);
      throw new Error('Failed to fetch products');
    }
    
    const products = await response.json();
    console.log('Products fetched successfully:', products);
    return products;
  } catch (error) {
    console.error('Error fetching products:', error);
    return [];
  }
}

export async function getProductById(id: string): Promise<Product | null> {
  try {
    // Use absolute URL for server-side requests, relative for client-side
    const baseUrl = typeof window !== 'undefined' 
      ? window.location.origin 
      : process.env.NEXT_PUBLIC_BASE_URL || `http://localhost:${process.env.PORT || 3000}`;
    const url = typeof window === 'undefined' 
      ? `${baseUrl}/api/products/${id}`
      : `/api/products/${id}`;
      
    const response = await fetch(url);
    if (!response.ok) {
      return null;
    }
    return await response.json();
  } catch (error) {
    console.error('Error fetching product:', error);
    return null;
  }
}

export async function createProduct(product: Omit<Product, 'id'>): Promise<Product> {
  try {
    // Use absolute URL for server-side requests, relative for client-side
    const baseUrl = typeof window !== 'undefined' 
      ? window.location.origin 
      : process.env.NEXT_PUBLIC_BASE_URL || `http://localhost:${process.env.PORT || 3000}`;
    const url = typeof window === 'undefined' 
      ? `${baseUrl}/api/products`
      : '/api/products';
      
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(product),
    });
    
    // Check if the response is OK before trying to parse JSON
    if (!response.ok) {
      // Try to get the error message from the response
      let errorMessage = 'Failed to create product';
      try {
        const errorData = await response.json();
        if (errorData.error) {
          errorMessage = errorData.error;
        } else {
          // If there's no error message in the response, create one based on status
          if (response.status === 409) {
            errorMessage = `Product with code "${product.productCode}" already exists`;
          }
        }
      } catch (e) {
        // If we can't parse the error response, create one based on status
        if (response.status === 409) {
          errorMessage = `Product with code "${product.productCode}" already exists`;
        } else {
          errorMessage = `Failed to create product. Server responded with status ${response.status}`;
        }
      }
      throw new Error(errorMessage);
    }
    
    // Try to parse the JSON response
    let result;
    try {
      result = await response.json();
    } catch (parseError) {
      console.error('Error parsing JSON response:', parseError);
      throw new Error('Invalid response from server');
    }
    
    return result;
  } catch (error) {
    // Re-throw any errors that occurred
    throw error;
  }
}

export async function updateProduct(id: string, product: Partial<Product>): Promise<boolean> {
  try {
    console.log('Calling updateProduct API with id:', id, 'and data:', product);
    
    // Use absolute URL for server-side requests, relative for client-side
    const baseUrl = typeof window !== 'undefined' 
      ? window.location.origin 
      : process.env.NEXT_PUBLIC_BASE_URL || `http://localhost:${process.env.PORT || 3000}`;
    const url = typeof window === 'undefined' 
      ? `${baseUrl}/api/products?id=${id}`
      : `/api/products?id=${id}`;
      
    console.log('Update product URL:', url);
      
    const response = await fetch(url, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(product),
    });
    
    console.log('Update product response status:', response.status);
    console.log('Update product response ok:', response.ok);
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('Update product error response:', errorData);
      // Throw error with details so the calling function can handle it
      throw new Error(errorData.details || errorData.error || `Failed to update product. Server responded with status ${response.status}`);
    }
    
    const result = await response.json();
    console.log('Update product result:', result);
    
    return response.ok;
  } catch (error) {
    console.error('Error updating product:', error);
    throw error; // Re-throw so the calling function can handle it
  }
}

export async function deleteProduct(id: string): Promise<boolean> {
  try {
    // Use absolute URL for server-side requests, relative for client-side
    const baseUrl = typeof window !== 'undefined' 
      ? window.location.origin 
      : process.env.NEXT_PUBLIC_BASE_URL || `http://localhost:${process.env.PORT || 3000}`;
    const url = typeof window === 'undefined' 
      ? `${baseUrl}/api/products?id=${id}`
      : `/api/products?id=${id}`;
      
    const response = await fetch(url, {
      method: 'DELETE',
    });
    
    return response.ok;
  } catch (error) {
    console.error('Error deleting product:', error);
    return false;
  }
}

export async function updateVariantStock(variantId: string, newStock: number): Promise<boolean> {
  try {
    // Use absolute URL for server-side requests, relative for client-side
    const baseUrl = typeof window !== 'undefined' 
      ? window.location.origin 
      : process.env.NEXT_PUBLIC_BASE_URL || `http://localhost:${process.env.PORT || 3000}`;
    const url = typeof window === 'undefined' 
      ? `${baseUrl}/api/products/variant/${variantId}`
      : `/api/products/variant/${variantId}`;
      
    const response = await fetch(url, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ newStock }),
    });
    
    return response.ok;
  } catch (error) {
    console.error('Error updating variant stock:', error);
    return false;
  }
}

export async function updateVariantImage(variantId: string, imageUrl: string): Promise<boolean> {
  try {
    // Use absolute URL for server-side requests, relative for client-side
    const baseUrl = typeof window !== 'undefined' 
      ? window.location.origin 
      : process.env.NEXT_PUBLIC_BASE_URL || `http://localhost:${process.env.PORT || 3000}`;
    const url = typeof window === 'undefined' 
      ? `${baseUrl}/api/products/variant/${variantId}/image`
      : `/api/products/variant/${variantId}/image`;
      
    const response = await fetch(url, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ imageUrl }),
    });
    
    return response.ok;
  } catch (error) {
    console.error('Error updating variant image:', error);
    return false;
  }
}